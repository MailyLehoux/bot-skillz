'use strict';

exports.__esModule = true;

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathIsInside = require('path-is-inside');

var _pathIsInside2 = _interopRequireDefault(_pathIsInside);

var _arrayIncludes = require('array-includes');

var _arrayIncludes2 = _interopRequireDefault(_arrayIncludes);

var _Project = require('../Project');

var _Project2 = _interopRequireDefault(_Project);

var _Package = require('../Package');

var _Package2 = _interopRequireDefault(_Package);

var _errors = require('./errors');

var _fs = require('./fs');

var fs = _interopRequireWildcard(_fs);

var _logger = require('./logger');

var logger = _interopRequireWildcard(_logger);

var _messages = require('./messages');

var messages = _interopRequireWildcard(_messages);

var _yarn = require('./yarn');

var yarn = _interopRequireWildcard(_yarn);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(project, pkg, dependencies, dependencyGraph) {
    var _this = this;

    var pkgName, internalDeps, directoriesToCreate, symlinksToCreate, valid, _iterator, _isArray, _i, _ref2, depName, versionInProject, versionInPkg, src, dest, _iterator2, _isArray2, _i2, _ref3, dependency, depWorkspace, projectBinFiles, _iterator3, _isArray3, _i3, _ref4, binFile, binPath, binName, actualBinFileRelative, actualBinFile, binFileRelativeToNodeModules, pathParts, _pkgName, workspaceBinPath, _iterator4, _isArray4, _i4, _ref5, _dependency, depBinFiles, _binName, _src, _dest, exists, _loop, _iterator5, _isArray5, _i5, _ref9, _ref8, _binName2, _binPath;

    return _regenerator2.default.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            pkgName = pkg.config.getName();
            // get all the dependencies that are internal workspaces in this project

            internalDeps = (dependencyGraph.get(pkgName) || {}).dependencies || [];
            directoriesToCreate = [];
            symlinksToCreate = [];
            valid = true;

            /*********************************************************************
             * Calculate all the external dependencies that need to be symlinked *
             *********************************************************************/

            directoriesToCreate.push(pkg.nodeModules, pkg.nodeModulesBin);

            _iterator = dependencies, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);

          case 7:
            if (!_isArray) {
              _context3.next = 13;
              break;
            }

            if (!(_i >= _iterator.length)) {
              _context3.next = 10;
              break;
            }

            return _context3.abrupt('break', 39);

          case 10:
            _ref2 = _iterator[_i++];
            _context3.next = 17;
            break;

          case 13:
            _i = _iterator.next();

            if (!_i.done) {
              _context3.next = 16;
              break;
            }

            return _context3.abrupt('break', 39);

          case 16:
            _ref2 = _i.value;

          case 17:
            depName = _ref2;
            versionInProject = project.pkg.getDependencyVersionRange(depName);
            versionInPkg = pkg.getDependencyVersionRange(depName);

            // If dependency is internal we can ignore it (we symlink below)

            if (!dependencyGraph.has(depName)) {
              _context3.next = 22;
              break;
            }

            return _context3.abrupt('continue', 37);

          case 22:
            if (versionInProject) {
              _context3.next = 26;
              break;
            }

            valid = false;
            logger.error(messages.depMustBeAddedToProject(pkg.config.getName(), depName));
            return _context3.abrupt('continue', 37);

          case 26:
            if (versionInPkg) {
              _context3.next = 30;
              break;
            }

            valid = false;
            logger.error(messages.couldntSymlinkDependencyNotExists(pkg.config.getName(), depName));
            return _context3.abrupt('continue', 37);

          case 30:
            if (!(versionInProject !== versionInPkg)) {
              _context3.next = 34;
              break;
            }

            valid = false;
            logger.error(messages.depMustMatchProject(pkg.config.getName(), depName, versionInProject, versionInPkg));
            return _context3.abrupt('continue', 37);

          case 34:
            src = _path2.default.join(project.pkg.nodeModules, depName);
            dest = _path2.default.join(pkg.nodeModules, depName);


            symlinksToCreate.push({ src, dest, type: 'junction' });

          case 37:
            _context3.next = 7;
            break;

          case 39:
            _iterator2 = internalDeps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);

          case 40:
            if (!_isArray2) {
              _context3.next = 46;
              break;
            }

            if (!(_i2 >= _iterator2.length)) {
              _context3.next = 43;
              break;
            }

            return _context3.abrupt('break', 57);

          case 43:
            _ref3 = _iterator2[_i2++];
            _context3.next = 50;
            break;

          case 46:
            _i2 = _iterator2.next();

            if (!_i2.done) {
              _context3.next = 49;
              break;
            }

            return _context3.abrupt('break', 57);

          case 49:
            _ref3 = _i2.value;

          case 50:
            dependency = _ref3;
            depWorkspace = dependencyGraph.get(dependency) || {};
            src = depWorkspace.pkg.dir;
            dest = _path2.default.join(pkg.nodeModules, dependency);


            symlinksToCreate.push({ src, dest, type: 'junction', recreate: true });

          case 55:
            _context3.next = 40;
            break;

          case 57:
            if (valid) {
              _context3.next = 59;
              break;
            }

            throw new _errors.BoltError('Cannot symlink invalid set of dependencies.');

          case 59:
            _context3.next = 61;
            return fs.readdirSafe(project.pkg.nodeModulesBin);

          case 61:
            projectBinFiles = _context3.sent;
            _iterator3 = projectBinFiles, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);

          case 63:
            if (!_isArray3) {
              _context3.next = 69;
              break;
            }

            if (!(_i3 >= _iterator3.length)) {
              _context3.next = 66;
              break;
            }

            return _context3.abrupt('break', 88);

          case 66:
            _ref4 = _iterator3[_i3++];
            _context3.next = 73;
            break;

          case 69:
            _i3 = _iterator3.next();

            if (!_i3.done) {
              _context3.next = 72;
              break;
            }

            return _context3.abrupt('break', 88);

          case 72:
            _ref4 = _i3.value;

          case 73:
            binFile = _ref4;
            binPath = _path2.default.join(project.pkg.nodeModulesBin, binFile);
            binName = _path2.default.basename(binPath);

            // read the symlink to find the actual bin file (path will be relative to the symlink)

            _context3.next = 78;
            return fs.readlink(binPath);

          case 78:
            actualBinFileRelative = _context3.sent;


            // If not a symlink we default to the actual src file
            // https://github.com/npm/npm/blob/d081cc6c8d73f2aa698aab36605377c95e916224/lib/utils/gently-rm.js#L273
            actualBinFile = actualBinFileRelative ? _path2.default.join(project.pkg.nodeModulesBin, actualBinFileRelative) : binPath;

            // To find the name of the dep that created the bin we'll get its path from node_modules and
            // use the first one or two parts (two if the package is scoped)

            binFileRelativeToNodeModules = _path2.default.relative(project.pkg.nodeModules, actualBinFile);
            pathParts = binFileRelativeToNodeModules.split(_path2.default.sep);
            _pkgName = pathParts[0];


            if (_pkgName.startsWith('@')) {
              _pkgName += '/' + pathParts[1];
            }

            workspaceBinPath = _path2.default.join(pkg.nodeModulesBin, binName);


            symlinksToCreate.push({
              src: binPath,
              dest: workspaceBinPath,
              type: 'exec'
            });

          case 86:
            _context3.next = 63;
            break;

          case 88:
            _iterator4 = internalDeps, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);

          case 89:
            if (!_isArray4) {
              _context3.next = 95;
              break;
            }

            if (!(_i4 >= _iterator4.length)) {
              _context3.next = 92;
              break;
            }

            return _context3.abrupt('break', 135);

          case 92:
            _ref5 = _iterator4[_i4++];
            _context3.next = 99;
            break;

          case 95:
            _i4 = _iterator4.next();

            if (!_i4.done) {
              _context3.next = 98;
              break;
            }

            return _context3.abrupt('break', 135);

          case 98:
            _ref5 = _i4.value;

          case 99:
            _dependency = _ref5;
            depWorkspace = dependencyGraph.get(_dependency) || {};
            depBinFiles = depWorkspace.pkg && depWorkspace.pkg.config && depWorkspace.pkg.config.getBin();

            if (depBinFiles) {
              _context3.next = 104;
              break;
            }

            return _context3.abrupt('continue', 133);

          case 104:
            if ((0, _arrayIncludes2.default)(dependencies, _dependency)) {
              _context3.next = 106;
              break;
            }

            return _context3.abrupt('continue', 133);

          case 106:
            if (!(typeof depBinFiles === 'string')) {
              _context3.next = 115;
              break;
            }

            // package may be scoped, name will only be the second part
            _binName = _dependency.split('/').pop();
            _src = _path2.default.join(depWorkspace.pkg.dir, depBinFiles);
            _dest = _path2.default.join(pkg.nodeModulesBin, _binName);
            _context3.next = 112;
            return fs.symlinkExists(_dest);

          case 112:
            exists = _context3.sent;

            !exists && symlinksToCreate.push({ src: _src, dest: _dest, type: 'exec' });
            return _context3.abrupt('continue', 133);

          case 115:
            _loop = _regenerator2.default.mark(function _loop(_binName2, _binPath) {
              var src, dest, _exists;

              return _regenerator2.default.wrap(function _loop$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      src = _path2.default.join(depWorkspace.pkg.dir, String(_binPath));
                      dest = _path2.default.join(pkg.nodeModulesBin, _binName2);

                      // Just in case the symlink is already added (it might have already existed in the projects bin/)

                      if (symlinksToCreate.find(function (symlink) {
                        return symlink.dest === dest;
                      })) {
                        _context2.next = 7;
                        break;
                      }

                      _context2.next = 5;
                      return fs.symlinkExists(dest);

                    case 5:
                      _exists = _context2.sent;

                      !_exists && symlinksToCreate.push({ src, dest, type: 'exec' });

                    case 7:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _loop, _this);
            });
            _iterator5 = (0, _entries2.default)(depBinFiles), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);

          case 117:
            if (!_isArray5) {
              _context3.next = 123;
              break;
            }

            if (!(_i5 >= _iterator5.length)) {
              _context3.next = 120;
              break;
            }

            return _context3.abrupt('break', 133);

          case 120:
            _ref9 = _iterator5[_i5++];
            _context3.next = 127;
            break;

          case 123:
            _i5 = _iterator5.next();

            if (!_i5.done) {
              _context3.next = 126;
              break;
            }

            return _context3.abrupt('break', 133);

          case 126:
            _ref9 = _i5.value;

          case 127:
            _ref8 = _ref9;
            _binName2 = _ref8[0];
            _binPath = _ref8[1];
            return _context3.delegateYield(_loop(_binName2, _binPath), 't0', 131);

          case 131:
            _context3.next = 117;
            break;

          case 133:
            _context3.next = 89;
            break;

          case 135:
            _context3.next = 137;
            return yarn.runIfExists(pkg, 'preinstall');

          case 137:
            _context3.next = 139;
            return _promise2.default.all(directoriesToCreate.map(function (dirName) {
              return fs.mkdirp(dirName);
            }));

          case 139:
            _context3.next = 141;
            return _promise2.default.all(symlinksToCreate.map(function () {
              var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref6) {
                var src = _ref6.src,
                    dest = _ref6.dest,
                    type = _ref6.type,
                    recreate = _ref6.recreate;
                var symlinkExists;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return fs.symlinkExists(dest);

                      case 2:
                        symlinkExists = _context.sent;

                        if (!(!symlinkExists || recreate)) {
                          _context.next = 6;
                          break;
                        }

                        _context.next = 6;
                        return fs.symlink(src, dest, type);

                      case 6:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function (_x5) {
                return _ref7.apply(this, arguments);
              };
            }()));

          case 141:
            _context3.next = 143;
            return yarn.runIfExists(pkg, 'postinstall');

          case 143:
            _context3.next = 145;
            return yarn.runIfExists(pkg, 'prepublish');

          case 145:
            _context3.next = 147;
            return yarn.runIfExists(pkg, 'prepare');

          case 147:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee2, this);
  }));

  function symlinkPackageDependencies(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  }

  return symlinkPackageDependencies;
}();