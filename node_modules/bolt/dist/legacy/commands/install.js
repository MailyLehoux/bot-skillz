'use strict';

exports.__esModule = true;
exports.install = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var install = exports.install = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(opts) {
    var _this = this;

    var cwd, project, packages, projectIsValid, _ref2, graph, valid;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            cwd = opts.cwd || process.cwd();
            _context2.next = 3;
            return _Project2.default.init(cwd);

          case 3:
            project = _context2.sent;
            _context2.next = 6;
            return project.getPackages();

          case 6:
            packages = _context2.sent;


            logger.info(messages.validatingProject(), { emoji: 'ðŸ”Ž', prefix: false });

            _context2.next = 10;
            return (0, _validateProject2.default)(project);

          case 10:
            projectIsValid = _context2.sent;

            if (projectIsValid) {
              _context2.next = 13;
              break;
            }

            throw new _errors.BoltError(messages.unableToInstall());

          case 13:

            logger.info(messages.installingProjectDependencies(), {
              emoji: 'ðŸ“¦',
              prefix: false
            });

            _context2.next = 16;
            return yarn.install(project.pkg.dir, opts.lockfileMode);

          case 16:

            logger.info(messages.linkingWorkspaceDependencies(), {
              emoji: 'ðŸ”—',
              prefix: false
            });

            _context2.next = 19;
            return project.getDependencyGraph(packages);

          case 19:
            _ref2 = _context2.sent;
            graph = _ref2.graph;
            valid = _ref2.valid;

            if (valid) {
              _context2.next = 24;
              break;
            }

            throw new _errors.BoltError('Cannot symlink invalid set of dependencies.');

          case 24:
            _context2.next = 26;
            return _promise2.default.all(packages.map(function () {
              var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(pkg) {
                var dependencies;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        dependencies = (0, _from2.default)(pkg.getAllDependencies().keys());
                        _context.next = 3;
                        return (0, _symlinkPackageDependencies2.default)(project, pkg, dependencies, graph);

                      case 3:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function (_x2) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 26:

            logger.info(messages.linkingWorkspaceBinaries(), {
              emoji: 'ðŸš€',
              prefix: false
            });

            _context2.next = 29;
            return (0, _symlinkPackagesBinariesToProject2.default)(project);

          case 29:

            logger.success(messages.installedAndLinkedWorkspaces(), { emoji: 'ðŸ’¥' });

          case 30:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function install(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.toInstallOptions = toInstallOptions;

var _Project = require('../Project');

var _Project2 = _interopRequireDefault(_Project);

var _options = require('../utils/options');

var options = _interopRequireWildcard(_options);

var _processes = require('../utils/processes');

var processes = _interopRequireWildcard(_processes);

var _fs = require('../utils/fs');

var fs = _interopRequireWildcard(_fs);

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _logger = require('../utils/logger');

var logger = _interopRequireWildcard(_logger);

var _messages = require('../utils/messages');

var messages = _interopRequireWildcard(_messages);

var _validateProject = require('../utils/validateProject');

var _validateProject2 = _interopRequireDefault(_validateProject);

var _symlinkPackageDependencies = require('../utils/symlinkPackageDependencies');

var _symlinkPackageDependencies2 = _interopRequireDefault(_symlinkPackageDependencies);

var _symlinkPackagesBinariesToProject = require('../utils/symlinkPackagesBinariesToProject');

var _symlinkPackagesBinariesToProject2 = _interopRequireDefault(_symlinkPackagesBinariesToProject);

var _yarn = require('../utils/yarn');

var yarn = _interopRequireWildcard(_yarn);

var _pathIsInside = require('path-is-inside');

var _pathIsInside2 = _interopRequireDefault(_pathIsInside);

var _errors = require('../utils/errors');

var _constants = require('../constants');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function toInstallOptions(args, flags) {
  var lockfileMode = 'default';
  // in order of strictness:
  if (options.boolean(flags.frozenLockfile, 'frozen-lockfile')) {
    lockfileMode = 'frozen';
  } else if (options.boolean(flags.pureLockfile, 'pure-lockfile')) {
    lockfileMode = 'pure';
  }
  return {
    cwd: options.string(flags.cwd, 'cwd'),
    lockfileMode
  };
}