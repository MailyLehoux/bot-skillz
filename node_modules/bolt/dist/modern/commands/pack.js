'use strict';

exports.__esModule = true;
exports.toPackOptions = toPackOptions;
exports.pack = pack;

var _options = require('../utils/options');

var options = _interopRequireWildcard(_options);

var _errors = require('../utils/errors');

var _yarn = require('../utils/yarn');

var yarn = _interopRequireWildcard(_yarn);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function toPackOptions(args, flags) {
  let fileName = options.string(flags.filename, 'filename') || options.string(flags.f, 'f');
  return {
    cwd: options.string(flags.cwd, 'cwd'),
    fileName: fileName || ''
  };
}
async function pack(opts) {
  let cwd = opts.cwd || process.cwd();
  let fileName = opts.fileName ? [`--filename=${opts.fileName}`] : [];

  try {
    await yarn.cliCommand(cwd, 'pack', fileName);
  } catch (err) {
    throw new _errors.BoltError(err);
  }
}