'use strict';

exports.__esModule = true;
exports.toConfigListOptions = toConfigListOptions;
exports.configList = configList;

var _options = require('../../utils/options');

var options = _interopRequireWildcard(_options);

var _errors = require('../../utils/errors');

var _yarn = require('../../utils/yarn');

var yarn = _interopRequireWildcard(_yarn);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function toConfigListOptions(args, flags) {
  if (args.length !== 0) {
    throw new _errors.BoltError('Invalid subcommand, try bolt config list');
  }
  return { cwd: options.string(flags.cwd, 'cwd') };
}
async function configList(opts) {
  let cwd = opts.cwd || process.cwd();
  try {
    await yarn.cliCommand(cwd, 'config', ['list']);
  } catch (err) {
    throw new _errors.BoltError(err);
  }
}